# -*- coding: utf-8 -*-
"""Intrusion_Detection_System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q2_RA4Mr_nKgFFcRmYNDoQhgibqbHaem
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
from sklearn.svm import SVC
from sklearn.metrics import confusion_matrix, accuracy_score

dataset = pd.read_csv('Friday-WorkingHours-Afternoon-DDos.pcap_ISCX11.csv')
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values

imputer = SimpleImputer(missing_values=np.nan, strategy='mean')
imputer.fit(X[:, 1:68])
X[:, 1:68] = imputer.transform(X[:, 1:68])
print(X)

le = LabelEncoder()
y = le.fit_transform(y)
print(y)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)
print(X_train)
print(y_train)
print(X_test)
print(y_test)

# Feature Scaling
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)
print(X_train)
print(X_test)

# Determining the number of components for LDA
num_features = X_train.shape[1]
num_classes = len(np.unique(y_train))
n_components = min(num_features, num_classes - 1)

# Applying LDA
lda = LDA(n_components=n_components)
X_train = lda.fit_transform(X_train, y_train)
X_test = lda.transform(X_test)

classifier = SVC(kernel='linear', random_state=0)
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)

cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy}")

import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap

# Function to plot the confusion matrix
def plot_confusion_matrix(cm, classes, title='Confusion matrix', cmap=plt.cm.Blues):
    plt.figure(figsize=(8, 6))
    sns.heatmap(cm, annot=True, fmt='d', cmap=cmap, xticklabels=classes, yticklabels=classes)
    plt.title(title)
    plt.ylabel('True label')
    plt.xlabel('Predicted label')
    plt.show()

# Plotting the confusion matrix
plot_confusion_matrix(cm, classes=le.classes_)

# Function to visualize the decision boundary for 1 or 2 dimensions
def plot_decision_regions(X, y, classifier, resolution=0.02):
    markers = ('s', 'x', 'o', '^', 'v')
    colors = ('red', 'blue', 'lightgreen', 'gray', 'cyan')
    cmap = ListedColormap(colors[:len(np.unique(y))])

    if X.shape[1] == 1:
        plt.figure(figsize=(8, 6))
        # Scatter plot for 1D LDA output
        for idx, cl in enumerate(np.unique(y)):
            plt.scatter(x=X[y == cl, 0], y=np.zeros((sum(y == cl), 1)),
                        alpha=0.8, c=cmap(idx),
                        marker=markers[idx], label=cl, edgecolor='black')
        plt.title('1D LDA decision region')
        plt.xlabel('LD1')
        plt.legend(loc='upper left')
        plt.show()
    elif X.shape[1] == 2:
        # Plotting the decision surface
        x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1
        x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1
        xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution),
                               np.arange(x2_min, x2_max, resolution))
        Z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)
        Z = Z.reshape(xx1.shape)
        plt.contourf(xx1, xx2, Z, alpha=0.3, cmap=cmap)
        plt.xlim(xx1.min(), xx1.max())
        plt.ylim(xx2.min(), xx2.max())

        # Plotting all samples
        for idx, cl in enumerate(np.unique(y)):
            plt.scatter(x=X[y == cl, 0], y=X[y == cl, 1],
                        alpha=0.8, c=cmap(idx),
                        marker=markers[idx], label=cl, edgecolor='black')

        plt.xlabel('LD1')
        plt.ylabel('LD2')
        plt.legend(loc='upper left')
        plt.show()
    else:
        print("The number of dimensions is not supported for visualization.")

# Determine the number of components for visualization
if X_train.shape[1] > 2:
    lda_vis = LDA(n_components=2)
    X_train_vis = lda_vis.fit_transform(X_train, y_train)
    X_test_vis = lda_vis.transform(X_test)
else:
    X_train_vis = X_train
    X_test_vis = X_test

# Combine train and test data for visualization
X_combined = np.vstack((X_train_vis, X_test_vis))
y_combined = np.hstack((y_train, y_test))

# Plot decision regions
plot_decision_regions(X_combined, y_combined, classifier=classifier)